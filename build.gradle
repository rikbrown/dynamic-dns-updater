buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

group 'codes.rik'
version '1.0-SNAPSHOT'

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'application'
apply plugin: 'docker'

group = "rikcodes"
sourceCompatibility = 1.8
mainClassName = "codes.rik.dynamicdnsupdater.App"

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // AWS
    compile group: 'com.amazonaws', name: 'aws-java-sdk-route53', version: '1.11.306'

    // Guava
    compile 'com.google.guava:guava:24.1-jre'

    // Logging
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile 'io.github.microutils:kotlin-logging:1.4.9'

    // Testing
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile(group: 'org.jetbrains.spek', name: 'spek-api', version: '1.1.5') {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntime('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile 'org.jetbrains.spek:spek-subject-extension:1.1.5'
    testCompile "io.mockk:mockk:1.7.15"
    testImplementation 'org.amshove.kluent:kluent:1.35'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    manifest {
        attributes 'Main-Class': 'codes.rik.dynamicdnsupdater.App'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

docker {
    dockerBinary "/usr/local/bin/docker"
    maintainer "Rik Brown <rik@rik.codes>"
}

task distDocker_arm32v7(type: Docker) {
    dependsOn jar
    docker { baseImage 'arm32v7/openjdk:8' }
    applicationName = applicationName + "-arm32v7"
    addFile(project.distTar.outputs.files.singleFile)
    entryPoint(["/${applicationName}/bin/${project.applicationName}"])
}

task distDocker_x64(type: Docker) {
    dependsOn jar
    docker { baseImage 'openjdk:8' }
    addFile(project.distTar.outputs.files.singleFile)
    entryPoint(["/${applicationName}/bin/${project.applicationName}"])
}
